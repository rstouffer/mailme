#!/usr/bin/python
### Ryan Stouffer
### A fun pogram that emails files to yourself
### Notes
## I am separating config file from obt args with the idea that 
## the config file will handle the connections but the 
## args would be about the email itself


import smtplib
import os.path as ospath
import os
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.utils import COMMASPACE, formatdate
from email import encoders
from optparse import OptionParser
import select
import datetime
import sys
import configparser
from appdirs import AppDirs
import base64
from Crypto.Cipher import AES
from Crypto import Random
import hashlib

cq=str(bytearray([82, 101, 97, 108, 105, 116, 121, 32, 105, 115, 32, 116, 104, 97, 116, 32, 119, 104, 105, 99, 104, 44, 32, 119, 104, 101, 110, 32, 121, 111, 117, 32, 115, 116, 111, 112, 32, 98, 101, 108, 105, 101, 118, 105, 110, 103, 32, 105, 110, 32, 105, 116, 44, 32, 100, 111, 101, 115, 110, 39, 116, 32, 103, 111, 32, 97, 119, 97, 121, 46]))

version='0.1'


def encrypt(raw):
	bs=32
	key=hashlib.sha256(cq.encode()).digest()
	raw = raw+(bs - len(raw) % bs) * chr(bs - len(raw) % bs)
	iv = Random.new().read(AES.block_size)
	cipher = AES.new(key, AES.MODE_CBC, iv)
	return base64.b64encode(iv + cipher.encrypt(raw))

def decrypt(enc):
	bs=32
	key=hashlib.sha256(cq.encode()).digest()
	enc = base64.b64decode(enc)
	iv = enc[:AES.block_size]
	cipher = AES.new(key, AES.MODE_CBC, iv)
	bytearr=cipher.decrypt(enc[AES.block_size:])
	return bytearr[:-ord(bytearr[len(bytearr)-1:])].decode('utf-8')

verbose=False
subject=""

usage = "usage: %prog [options] [file1] [file2] [...]"
parser = OptionParser(usage=usage, version="%prog " + version, description="A simple commandline tool to send emails to yourself, will take a list of files as args.  If stdin is detected that will be attached as a file.  On first run a config file is generated and if not found it tries to create it and quit.  You are expected to populate that config file.  ")

parser.add_option("-t", "--to", dest="to", help="Comma separated list of emails")
parser.add_option("-s", "--subject", dest="subject", help="Subject of the email")
parser.add_option("-m", "--message", dest="message", help="Message of the email")
parser.add_option("-f", "--filename", dest="filename", help="Filename stdin attachment if no stdin then the option is ignored")
parser.add_option("-c", "--config", dest="config", help="Configuration file for mail data")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Verbose Flag",default=False)

(options, args) = parser.parse_args()


## send_mail sends the email
## optargs
###  send_from who the email is from
###  send_to an array list of strings
###  subject string
###  message string
###  files an array list of file paths
## config file
###  server email server
###  port server port
###  username username
###  password unencrypted password
###  use_tls boolean use tls or not
def send_mail(send_from, send_to, subject, message, files, server, port, username, password, use_tls):
	#some boinler plate for the email itself
	msg = MIMEMultipart()
	msg['From'] = send_from
	msg['To'] = COMMASPACE.join(send_to)
	msg['Date'] = formatdate(localtime=True)
	msg['Subject'] = subject

	#add the message

	
	# check for stdin if so attach it to the file
	if not sys.stdin.isatty():
		part = MIMEBase('application', "octet-stream")
		part.set_payload(sys.stdin.read())
		encoders.encode_base64(part)
		part.add_header('Content-Disposition', 'atachment; filename="{}"'.format(filename))
		msg.attach(part)

	# get args coming in assume are files
	for path in files:
		part = MIMEBase('application', "octet-stream")
		with open(path, 'rb') as file:
			part.set_payload(file.read())
		encoders.encode_base64(part)
		part.add_header('Content-Disposition', 'attachment; filename="{}"'.format(os.path.basename(path)))
		msg.attach(part)
		message = message + ' ' + path

	msg.attach(MIMEText(message))

	if verbose: print 'connecting to server and port ' + server + ' ' + str(port)

	# send the meail

	smtp = smtplib.SMTP(server, port)
	if use_tls:
		smtp.starttls()
		smtp.login(username, password)
	smtp.sendmail(send_from, send_to, msg.as_string())
	smtp.quit()

if options.verbose:
	verbose=True

if options.message:
	message = options.message


#always have a subject
if options.subject:
	subject = options.subject
else:
	subject = datetime.datetime.now().strftime('Attached %Y-%m-%d')

#if no stdin then ignored
if options.filename:
    filename=options.filename
else:
	filename='output.txt'

if options.to:
	toarr = options.to.split(',')
else:
	toarr = []

#the config path can change, I am not sure how this would work with windows, where would I put the config file?
if options.config:
	configfilepath=options.config
else:
	dirs = AppDirs("MailMe", "RyanStouffer.com", version=version)
	configfilepath=dirs.user_config_dir+'/mailme.ini'

if verbose: print 'Using config file ' + configfilepath


config = configparser.ConfigParser()


#use the config parser if none is found create it and quit

if ospath.isfile(configfilepath):

	config.read(configfilepath)
	settings=config['DEFAULT']

	if settings['password'] or settings['password'] != '':

		password = settings['password']
		config.set('DEFAULT', 'encryptedpassword', encrypt(password))
		config.set('DEFAULT', 'password', '')
		with open(configfilepath, 'w') as configfile:
			config.write(configfile)
	else: 
		password=decrypt(settings['encryptedpassword'])
else:
	if not ospath.exists(ospath.dirname(configfilepath)):
		os.makedirs(ospath.dirname(configfilepath))

	config['DEFAULT'] = { 'send_from':'sender@example.com', 'send_to':['defaultrecipient@example.com'], 'subject_postfix':"", 'message_prefix':"", 
              'server':"smtp.example.com", 'port':587, 'username':'username@example.com', 'password':'userpassword', 'use_tls':True}

	with open(configfilepath, 'w') as configfile:
		config.write(configfile)

	print "please provide settings to " + configfilepath

	sys.exit()	

toarr.append(settings['send_from'])

send_mail(settings['send_from'], toarr, subject+' '+settings['subject_postfix'], settings['message_prefix'], args, settings['server'], int(settings['port']),  settings['username'],  password, settings['use_tls'])

